{"ast":null,"code":"import _classCallCheck from \"/home/alex/ubunta/gt-desk/Desktop-GT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/alex/ubunta/gt-desk/Desktop-GT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/alex/ubunta/gt-desk/Desktop-GT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/alex/ubunta/gt-desk/Desktop-GT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/alex/ubunta/gt-desk/Desktop-GT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/alex/ubunta/gt-desk/Desktop-GT/src/components/BigMap.jsx\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { YMaps, Map, Placemark, GeoObject, ObjectManager, Clusterer, Circle } from 'react-yandex-maps';\n\nvar BigMap =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BigMap, _Component);\n\n  function BigMap() {\n    var _this;\n\n    _classCallCheck(this, BigMap);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BigMap).call(this));\n    _this.map = null;\n    _this.state = {\n      center: [53.899953, 27.539290],\n      zoom: 11,\n      controls: ['zoomControl'],\n      coords: [],\n      //подтвержденные координаты\n      address: [],\n      //подтвержденные адреса\n      tempCoords: '',\n      //текущие координаты\n      tempAddress: '',\n      //текущий адрес\n      addressNumber: 0,\n      //индекс последнего подтвержденного адреса\n      ymaps: null,\n      equipment: {\n        model: \"Экскаватор гусеничный\",\n        quantity: 1,\n        orderStartDate: '',\n        orderEndDate: '',\n        orderAddress: 'адрес',\n        orderPrice: 80,\n        serviceСommission: 7,\n        totalPrice: 87\n      } // console.log(this.state.address)\n\n    };\n\n    _this.createTemplateLayoutFactory = function (ymaps) {\n      _this.setState({\n        ymaps: ymaps\n      });\n\n      console.log('ymaps:   ', ymaps);\n    };\n\n    return _this;\n  }\n\n  _createClass(BigMap, [{\n    key: \"mapClick\",\n    value: function mapClick(e) {\n      var _this2 = this;\n\n      if (this.state.addressNumber < 6) {\n        var coords = e.get('coords');\n        this.setState({\n          tempCoords: coords\n        });\n        this.state.tempAddress = this.state.ymaps.geocode(coords).then(function (el) {\n          var firstGeoObject = el.geoObjects.get(0);\n          var tempAddress = firstGeoObject.properties._data.name;\n\n          _this2.setState({\n            tempAddress: tempAddress\n          });\n\n          console.log('address: ' + _this2.state.address + '          ' + 'tempAddress: ' + _this2.state.tempAddress);\n        });\n      }\n    }\n  }, {\n    key: \"getCoords\",\n    value: function getCoords(e) {\n      var _this3 = this;\n\n      var obj = e.currentTarget;\n      this.state.ymaps.geocode(obj.value).then(function (el) {\n        var firstGeoObject = el.geoObjects.get(0);\n\n        _this3.setState({\n          tempCoords: firstGeoObject.geometry._coordinates\n        });\n\n        _this3.setState({\n          tempAddress: obj.id == 'address' + _this3.state.addressNumber ? obj.value : ''\n        }); // console.log(\n        //     'address: ' + this.state.address + '          ' +\n        //     'tempAddress: ' + this.state.tempAddress + '          ' +\n        //     'addressNumber: ' + this.state.addressNumber\n        // )\n\n\n        _this3.setTempAddress();\n      });\n    }\n  }, {\n    key: \"addAddress\",\n    value: function addAddress() {\n      if (this.state.tempAddress !== '') {\n        //проверяем выбран ли адрес\n        var address = this.state.address; //массив подтвержденных адресов\n\n        var addressCurr = this.state.tempAddress; //строка с адресом текущего клика\n\n        var coords = this.state.coords; //массив с подтвержденными координатами\n\n        var coordsCurr = this.state.tempCoords; //массив с координатами текущего клика\n\n        address.push(addressCurr); //добавляем текущий адрес в список подтвержденных\n\n        coords.push(coordsCurr); //добавляем текущие координаты в список подтвержденных\n\n        this.setState({\n          address: address\n        });\n        this.setState({\n          coords: coords\n        });\n\n        if (this.state.addressNumber < 6 && this.state.tempAddress != 'undefined') {\n          //проверяем кол-во подтвержденных адресов (макс. 7)\n          this.setState({\n            addressNumber: this.state.addressNumber + 1\n          });\n          this.setState({\n            tempAddress: ''\n          });\n          document.getElementById('address' + (this.state.addressNumber + 1)).classList.remove('none');\n        } // console.log(this.state.address, this.state.coords, 'AddressNumber:   ', this.state.addressNumber)\n\n      } else {// console.error('сначала выбираем адрес, потом жмякаем')\n        }\n    }\n  }, {\n    key: \"setTempAddressNumber\",\n    value: function setTempAddressNumber(e) {\n      var obj = e.target;\n      var addressNumberNow = this.state.addressNumber;\n      addressNumberNow = +obj.id[obj.id.length - 1];\n      this.setState({\n        addressNumber: addressNumberNow\n      }); //ставим текущий адрес = выбранному input\n      // console.log('ID:   ', obj.id)\n      // console.log('ADDRESSNUMBER:   ', this.state.addressNumber)\n    }\n  }, {\n    key: \"setRoute\",\n    value: function setRoute() {\n      var _this4 = this;\n\n      var ymaps = this.state.ymaps;\n      var pointsArray = this.state.coords; // let pointsArray = this.state.coords\n\n      ymaps.route(pointsArray // {\n      //     multiRoute: true\n      // },\n      // {\n      //     mapStateAutoApply: true\n      // }\n      ).then(function (route) {\n        route.getPaths().options.set({\n          // в балуне выводим только информацию о времени движения с учетом пробок\n          // balloonContentBodyLayout: ymaps.templateLayoutFactory.createClass(\n          //     \"$[properties.humanJamsTime]\"\n          // ),\n          // можно выставить настройки графики маршруту\n          strokeColor: \"#c10100\",\n          opacity: 0.9\n        }); // добавляем маршрут на карту\n\n        _this4.map.geoObjects.add(route);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      return React.createElement(\"div\", {\n        className: \"address-selection-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"address-selection-main-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"address-units-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"p-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"\\u0412\\u042B\\u0411\\u0415\\u0420\\u0418\\u0422\\u0415 \\u041C\\u0415\\u0421\\u0422\\u041E \\u0418\\u0421\\u041F\\u041E\\u041B\\u041D\\u0415\\u041D\\u0418\\u042F \\u0417\\u0410\\u041A\\u0410\\u0417\\u0410\"), React.createElement(\"p\", {\n        className: \"p-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"\\u0417\\u0410\\u041A\\u0410\\u0417 \", React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        id: \"address0\",\n        type: \"text\",\n        placeholder: \"\\u041F\\u043E\\u0438\\u0441\\u043A \\u0430\\u0434\\u0440\\u0435\\u0441\\u0430\",\n        value: this.state.addressNumber === 0 && !this.state.address[0] ? this.state.tempAddress : this.state.address[0],\n        onChange: function onChange(e) {\n          _this5.setState({\n            tempAddress: e.target.value\n          });\n        },\n        onClick: this.setTempAddressNumber.bind(this),\n        onBlur: this.getCoords.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        className: \"none\",\n        id: \"address1\",\n        type: \"text\",\n        placeholder: \"\\u041F\\u043E\\u0438\\u0441\\u043A \\u0430\\u0434\\u0440\\u0435\\u0441\\u0430\",\n        value: this.state.addressNumber === 1 && !this.state.address[1] ? this.state.tempAddress : this.state.address[1],\n        onChange: function onChange(e) {\n          return _this5.setState({\n            tempAddress: e.target.value\n          });\n        },\n        onClick: this.setTempAddressNumber.bind(this),\n        onBlur: this.getCoords.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        className: \"none\",\n        id: \"address2\",\n        type: \"text\",\n        placeholder: \"\\u041F\\u043E\\u0438\\u0441\\u043A \\u0430\\u0434\\u0440\\u0435\\u0441\\u0430\",\n        value: this.state.addressNumber === 2 && !this.state.address[2] ? this.state.tempAddress : this.state.address[2],\n        onChange: function onChange(e) {\n          return _this5.setState({\n            tempAddress: e.target.value\n          });\n        },\n        onClick: this.setTempAddressNumber.bind(this),\n        onBlur: this.getCoords.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        className: \"none\",\n        id: \"address3\",\n        type: \"text\",\n        placeholder: \"\\u041F\\u043E\\u0438\\u0441\\u043A \\u0430\\u0434\\u0440\\u0435\\u0441\\u0430\",\n        value: this.state.addressNumber === 3 && !this.state.address[3] ? this.state.tempAddress : this.state.address[3],\n        onChange: function onChange(e) {\n          return _this5.setState({\n            tempAddress: e.target.value\n          });\n        },\n        onClick: this.setTempAddressNumber.bind(this),\n        onBlur: this.getCoords.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        className: \"none\",\n        id: \"address4\",\n        type: \"text\",\n        placeholder: \"\\u041F\\u043E\\u0438\\u0441\\u043A \\u0430\\u0434\\u0440\\u0435\\u0441\\u0430\",\n        value: this.state.addressNumber === 4 && !this.state.address[4] ? this.state.tempAddress : this.state.address[4],\n        onChange: function onChange(e) {\n          return _this5.setState({\n            tempAddress: e.target.value\n          });\n        },\n        onClick: this.setTempAddressNumber.bind(this),\n        onBlur: this.getCoords.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        className: \"none\",\n        id: \"address5\",\n        type: \"text\",\n        placeholder: \"\\u041F\\u043E\\u0438\\u0441\\u043A \\u0430\\u0434\\u0440\\u0435\\u0441\\u0430\",\n        value: this.state.addressNumber === 5 && !this.state.address[5] ? this.state.tempAddress : this.state.address[5],\n        onChange: function onChange(e) {\n          return _this5.setState({\n            tempAddress: e.target.value\n          });\n        },\n        onClick: this.setTempAddressNumber.bind(this),\n        onBlur: this.getCoords.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        className: \"none\",\n        id: \"address6\",\n        type: \"text\",\n        placeholder: \"\\u041F\\u043E\\u0438\\u0441\\u043A \\u0430\\u0434\\u0440\\u0435\\u0441\\u0430\",\n        value: this.state.addressNumber === 6 && !this.state.address[6] ? this.state.tempAddress : this.state.address[6],\n        onChange: function onChange(e) {\n          return _this5.setState({\n            tempAddress: e.target.value\n          });\n        },\n        onClick: this.setTempAddressNumber.bind(this),\n        onBlur: this.getCoords.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"order-params-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, this.state.equipment.model)), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        onClick: this.test,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, \"\\u041A\\u043E\\u043B-\\u0432\\u043E: \", React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, this.state.equipment.quantity)), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, \"\\u0414\\u0430\\u0442\\u0430 \\u043D\\u0430\\u0447\\u0430\\u043B\\u0430: \", React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, this.state.equipment.orderStartDate)), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, \"\\u0414\\u0430\\u0442\\u0430 \\u043E\\u043A\\u043E\\u043D\\u0447\\u0430\\u043D\\u0438\\u044F: \", React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, this.state.equipment.orderEndDate)), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, \"\\u041C\\u0435\\u0441\\u0442\\u043E \\u0432\\u044B\\u043F\\u043E\\u043B\\u043D\\u0435\\u043D\\u0438\\u044F \\u0440\\u0430\\u0431\\u043E\\u0442\\u044B: \", React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, this.state.equipment.orderAddress)), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, \"\\u0421\\u0443\\u043C\\u043C\\u0430 \\u0437\\u0430\\u043A\\u0430\\u0437\\u0430: \", React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, this.state.equipment.orderPrice + ' р. без НДС')), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, \"\\u041A\\u043E\\u043C\\u0438\\u0441\\u0441\\u0438\\u044F \\u0441\\u0435\\u0440\\u0432\\u0438\\u0441\\u0430: \", React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, this.state.equipment.serviceСommission + ' р. в т.ч. НДС')), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, \"\\u0418\\u0442\\u043E\\u0433\\u043E: \", React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, this.state.equipment.totalPrice + ' р.')), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"bigMap-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(YMaps, {\n        query: {\n          ns: 'use-load-option',\n          load: \"package.full\",\n          apikey: '45c5bae3-a422-4593-8d3a-7204d434cca5' //Проблемы с картой? Начни отсюда\n\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(Map, {\n        instanceRef: function instanceRef(ref) {\n          return _this5.map = ref;\n        },\n        onLoad: this.createTemplateLayoutFactory,\n        defaultState: this.state,\n        width: \"100%\",\n        onClick: this.mapClick.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(Placemark, {\n        geometry: this.state.tempCoords,\n        properties: {\n          balloonContentBody: this.state.tempAddress\n        } // options={{ balloonContentLayout: this.state.template }}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }), React.createElement(Clusterer, {\n        options: {\n          preset: 'islands#invertedVioletClusterIcons',\n          groupByCoordinates: false\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, this.state.coords.map(function (coords, index) {\n        return React.createElement(Placemark, {\n          key: index,\n          geometry: coords,\n          properties: {\n            balloonContentBody: _this5.state.address[index]\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 201\n          },\n          __self: this\n        });\n      })))))), React.createElement(\"div\", {\n        className: \"btn-wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        onClick: this.addAddress.bind(this),\n        className: \"btn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0430\\u0434\\u0440\\u0435\\u0441\"), React.createElement(\"div\", {\n        onClick: this.setRoute.bind(this),\n        className: \"btn bigMap-next\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, \"\\u0414\\u0430\\u043B\\u0435\\u0435\")));\n    } // init() {\n    //     var address1Elem = document.getElementById('address1');\n    //     address1Elem.onblur = setAddress(address1Elem.value);\n    //     var bigMap = new ymaps.Map(\"bigMap-container\", {\n    //         center: [53.889953, 27.539290],\n    //         zoom: 10,\n    //         controls: []\n    //     }, {\n    //             searchControlProvider: 'yandex#search'\n    //         });\n    //     var myPlacemark;\n    //     bigMap.events.add('click', function (e) {\n    //         var coords = e.get('coords');\n    //         if (myPlacemark) {\n    //             myPlacemark.geometry.setCoordinates(coords);\n    //         }\n    //         // Если нет – создаем.\n    //         else {\n    //             myPlacemark = createPlacemark(coords);\n    //             bigMap.geoObjects.add(myPlacemark);\n    //             // Слушаем событие окончания перетаскивания на метке.\n    //             myPlacemark.events.add('dragend', function () {\n    //                 getAddress(myPlacemark.geometry.getCoordinates());\n    //             });\n    //         }\n    //         getAddress(coords);\n    //     });\n    //     function createPlacemark(coords) {\n    //         return new ymaps.Placemark(coords, {\n    //             // iconCaption: 'поиск...'\n    //         }, {\n    //                 // preset: 'islands#violetDotIconWithCaption',\n    //                 draggable: true,\n    //                 iconLayout: 'default#image',\n    //                 iconImageHref: './images/point.svg',\n    //                 iconImageSize: [40, 43],\n    //                 iconImageOffset: [-20, -43],\n    //             });\n    //     }\n    //     function getAddress(coords) {\n    //         // myPlacemark.properties.set('iconCaption', 'поиск...');\n    //         ymaps.geocode(coords).then(function (res) {\n    //             var firstGeoObject = res.geoObjects.get(0);\n    //             myPlacemark.properties\n    //                 .set({\n    //                     // Формируем строку с данными об объекте.\n    //                     iconCaption: [\n    //                         // Название населенного пункта или вышестоящее административно-территориальное образование.\n    //                         firstGeoObject.getLocalities().length ? firstGeoObject.getLocalities() : firstGeoObject.getAdministrativeAreas(),\n    //                         // Получаем путь до топонима, если метод вернул null, запрашиваем наименование здания.\n    //                         firstGeoObject.getThoroughfare() || firstGeoObject.getPremise()\n    //                         // firstGeoObject.getPremise()\n    //                     ].filter(Boolean).join(', '),\n    //                     // В качестве контента балуна задаем строку с адресом объекта.\n    //                     balloonContent: firstGeoObject.getAddressLine()\n    //                 });\n    //             address1Elem.value = firstGeoObject.getAddressLine();\n    //         });\n    //     };\n    //     function setAddress(param) {\n    //         ymaps.geocode(param, {\n    //             /**\n    //              * Опции запроса\n    //             //  * @see https://api.yandex.ru/maps/doc/jsapi/2.1/ref/reference/geocode.xml\n    //              */\n    //             // Сортировка результатов от центра окна карты.\n    //             // boundedBy: myMap.getBounds(),\n    //             // strictBounds: true,\n    //             // Вместе с опцией boundedBy будет искать строго внутри области, указанной в boundedBy.\n    //             // Если нужен только один результат, экономим трафик пользователей.\n    //             results: 1\n    //         }).then(function (res) {\n    //             // Выбираем первый результат геокодирования.\n    //             var firstGeoObject = res.geoObjects.get(0),\n    //                 // Координаты геообъекта.\n    //                 coords = firstGeoObject.geometry.getCoordinates(),\n    //                 // Область видимости геообъекта.\n    //                 bounds = firstGeoObject.properties.get('boundedBy');\n    //             firstGeoObject.options.set('preset', 'islands#darkBlueDotIconWithCaption');\n    //             // Получаем строку с адресом и выводим в иконке геообъекта.\n    //             firstGeoObject.properties.set('iconCaption', firstGeoObject.getAddressLine());\n    //             // Добавляем первый найденный геообъект на карту.\n    //             bigMap.geoObjects.add(firstGeoObject);\n    //             // Масштабируем карту на область видимости геообъекта.\n    //             bigMap.setBounds(bounds, {\n    //                 // Проверяем наличие тайлов на данном масштабе.\n    //                 checkZoomRange: true\n    //             });\n    //         });\n    //     }\n    // }\n    //<Map onClick={} defaultState={{ center: [53.899953, 27.539290], zoom: 11 }} width={document.getElementsByClassName('bigMap-container').offsetWidth + 'px'} height={document.getElementsByClassName('bigMap-container').offsetHeight + 'px'}>\n\n  }]);\n\n  return BigMap;\n}(Component);\n\nexport { BigMap as default };","map":{"version":3,"sources":["/home/alex/ubunta/gt-desk/Desktop-GT/src/components/BigMap.jsx"],"names":["React","Component","Link","YMaps","Map","Placemark","GeoObject","ObjectManager","Clusterer","Circle","BigMap","map","state","center","zoom","controls","coords","address","tempCoords","tempAddress","addressNumber","ymaps","equipment","model","quantity","orderStartDate","orderEndDate","orderAddress","orderPrice","serviceСommission","totalPrice","createTemplateLayoutFactory","setState","console","log","e","get","geocode","then","el","firstGeoObject","geoObjects","properties","_data","name","obj","currentTarget","value","geometry","_coordinates","id","setTempAddress","addressCurr","coordsCurr","push","document","getElementById","classList","remove","target","addressNumberNow","length","pointsArray","route","getPaths","options","set","strokeColor","opacity","add","setTempAddressNumber","bind","getCoords","test","ns","load","apikey","ref","mapClick","balloonContentBody","preset","groupByCoordinates","index","addAddress","setRoute"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport { YMaps, Map, Placemark, GeoObject, ObjectManager, Clusterer, Circle } from 'react-yandex-maps'\n\nexport default class BigMap extends Component {\n    map = null\n    constructor() {\n        super()\n        this.state = {\n            center: [53.899953, 27.539290],\n            zoom: 11,\n            controls: ['zoomControl'],\n            coords: [], //подтвержденные координаты\n            address: [],    //подтвержденные адреса\n            tempCoords: '', //текущие координаты\n            tempAddress: '',    //текущий адрес\n            addressNumber: 0,   //индекс последнего подтвержденного адреса\n            ymaps: null,\n            equipment:\n            {\n                model: \"Экскаватор гусеничный\",\n                quantity: 1,\n                orderStartDate: '',\n                orderEndDate: '',\n                orderAddress: 'адрес',\n                orderPrice: 80,\n                serviceСommission: 7,\n                totalPrice: 87\n            }\n        }\n        // console.log(this.state.address)\n        this.createTemplateLayoutFactory = ymaps => {\n            this.setState({ ymaps: ymaps })\n            console.log('ymaps:   ', ymaps)\n        };\n    }\n\n    mapClick(e) {\n        if (this.state.addressNumber < 6) {\n            let coords = e.get('coords')\n            this.setState({ tempCoords: coords })\n            this.state.tempAddress = this.state.ymaps.geocode(coords).then((el) => {\n                let firstGeoObject = el.geoObjects.get(0)\n                let tempAddress = firstGeoObject.properties._data.name\n                this.setState({ tempAddress: tempAddress })\n                console.log(\n                    'address: ' + this.state.address + '          ' +\n                    'tempAddress: ' + this.state.tempAddress\n                )\n            })\n        }\n    }\n\n    getCoords(e) {\n        let obj = e.currentTarget\n        this.state.ymaps.geocode(obj.value).then(el => {\n            let firstGeoObject = el.geoObjects.get(0)\n            this.setState({ tempCoords: firstGeoObject.geometry._coordinates })\n            this.setState({ tempAddress: (obj.id == ('address' + this.state.addressNumber)) ? obj.value : '' })\n            // console.log(\n            //     'address: ' + this.state.address + '          ' +\n            //     'tempAddress: ' + this.state.tempAddress + '          ' +\n            //     'addressNumber: ' + this.state.addressNumber\n            // )\n            this.setTempAddress()\n        })\n    }\n    addAddress() {\n        if (this.state.tempAddress !== '') {    //проверяем выбран ли адрес\n            let address = this.state.address    //массив подтвержденных адресов\n            let addressCurr = this.state.tempAddress    //строка с адресом текущего клика\n            let coords = this.state.coords  //массив с подтвержденными координатами\n            let coordsCurr = this.state.tempCoords  //массив с координатами текущего клика\n            address.push(addressCurr)   //добавляем текущий адрес в список подтвержденных\n            coords.push(coordsCurr) //добавляем текущие координаты в список подтвержденных\n            this.setState({ address: address })\n            this.setState({ coords: coords })\n\n            if (this.state.addressNumber < 6 && this.state.tempAddress != 'undefined') { //проверяем кол-во подтвержденных адресов (макс. 7)\n                this.setState({ addressNumber: this.state.addressNumber + 1 })\n                this.setState({ tempAddress: '' })\n                document.getElementById('address' + (this.state.addressNumber + 1)).classList.remove('none');\n            }\n            // console.log(this.state.address, this.state.coords, 'AddressNumber:   ', this.state.addressNumber)\n        } else {\n            // console.error('сначала выбираем адрес, потом жмякаем')\n        }\n    }\n    setTempAddressNumber(e) {\n        let obj = e.target\n        let addressNumberNow = this.state.addressNumber\n        addressNumberNow = +obj.id[obj.id.length - 1]\n        this.setState({ addressNumber: addressNumberNow })  //ставим текущий адрес = выбранному input\n        // console.log('ID:   ', obj.id)\n        // console.log('ADDRESSNUMBER:   ', this.state.addressNumber)\n    }\n\n    setRoute() {\n        let ymaps = this.state.ymaps\n        let pointsArray = this.state.coords\n        // let pointsArray = this.state.coords\n        ymaps.route(\n            pointsArray\n            // {\n            //     multiRoute: true\n            // },\n            // {\n            //     mapStateAutoApply: true\n            // }\n        )\n            .then(route => {\n                route.getPaths().options.set({\n                    // в балуне выводим только информацию о времени движения с учетом пробок\n                    // balloonContentBodyLayout: ymaps.templateLayoutFactory.createClass(\n                    //     \"$[properties.humanJamsTime]\"\n                    // ),\n                    // можно выставить настройки графики маршруту\n                    strokeColor: \"#c10100\",\n                    opacity: 0.9\n                });\n                // добавляем маршрут на карту\n                this.map.geoObjects.add(route);\n            });\n    };\n\n    render() {\n        return (\n            <div className=\"address-selection-block\">\n                <div className=\"address-selection-main-container\">\n                    <div className=\"address-units-container\">\n                        <p className=\"p-title\">ВЫБЕРИТЕ МЕСТО ИСПОЛНЕНИЯ ЗАКАЗА</p>\n                        <p className=\"p-title\">ЗАКАЗ <strong></strong></p>\n                        <input id=\"address0\" type=\"text\" placeholder=\"Поиск адреса\"\n                            value={(this.state.addressNumber === 0 && !this.state.address[0]) ? this.state.tempAddress : this.state.address[0]}\n                            onChange={e => { this.setState({ tempAddress: e.target.value }) }}\n                            onClick={this.setTempAddressNumber.bind(this)}\n                            onBlur={this.getCoords.bind(this)} />\n                        <input className=\"none\" id=\"address1\" type=\"text\" placeholder=\"Поиск адреса\"\n                            value={(this.state.addressNumber === 1 && !this.state.address[1]) ? this.state.tempAddress : this.state.address[1]}\n                            onChange={e => this.setState({ tempAddress: e.target.value })}\n                            onClick={this.setTempAddressNumber.bind(this)}\n                            onBlur={this.getCoords.bind(this)} />\n                        <input className=\"none\" id=\"address2\" type=\"text\" placeholder=\"Поиск адреса\"\n                            value={(this.state.addressNumber === 2 && !this.state.address[2]) ? this.state.tempAddress : this.state.address[2]}\n                            onChange={e => this.setState({ tempAddress: e.target.value })}\n                            onClick={this.setTempAddressNumber.bind(this)}\n                            onBlur={this.getCoords.bind(this)} />\n                        <input className=\"none\" id=\"address3\" type=\"text\" placeholder=\"Поиск адреса\"\n                            value={(this.state.addressNumber === 3 && !this.state.address[3]) ? this.state.tempAddress : this.state.address[3]}\n                            onChange={e => this.setState({ tempAddress: e.target.value })}\n                            onClick={this.setTempAddressNumber.bind(this)}\n                            onBlur={this.getCoords.bind(this)} />\n                        <input className=\"none\" id=\"address4\" type=\"text\" placeholder=\"Поиск адреса\"\n                            value={(this.state.addressNumber === 4 && !this.state.address[4]) ? this.state.tempAddress : this.state.address[4]}\n                            onChange={e => this.setState({ tempAddress: e.target.value })}\n                            onClick={this.setTempAddressNumber.bind(this)}\n                            onBlur={this.getCoords.bind(this)} />\n                        <input className=\"none\" id=\"address5\" type=\"text\" placeholder=\"Поиск адреса\"\n                            value={(this.state.addressNumber === 5 && !this.state.address[5]) ? this.state.tempAddress : this.state.address[5]}\n                            onChange={e => this.setState({ tempAddress: e.target.value })}\n                            onClick={this.setTempAddressNumber.bind(this)}\n                            onBlur={this.getCoords.bind(this)} />\n                        <input className=\"none\" id=\"address6\" type=\"text\" placeholder=\"Поиск адреса\"\n                            value={(this.state.addressNumber === 6 && !this.state.address[6]) ? this.state.tempAddress : this.state.address[6]}\n                            onChange={e => this.setState({ tempAddress: e.target.value })}\n                            onClick={this.setTempAddressNumber.bind(this)}\n                            onBlur={this.getCoords.bind(this)} />\n\n                        <div className=\"order-params-container\">\n                            <span><strong>{this.state.equipment.model}</strong></span><br />\n                            <span onClick={this.test}>Кол-во: <strong>{this.state.equipment.quantity}</strong></span><br />\n                            <span>Дата начала: <strong>{this.state.equipment.orderStartDate}</strong></span><br />\n                            <span>Дата окончания: <strong>{this.state.equipment.orderEndDate}</strong></span><br />\n                            <span>Место выполнения работы: <strong>{this.state.equipment.orderAddress}</strong></span><br />\n                            <span>Сумма заказа: <strong>{this.state.equipment.orderPrice + ' р. без НДС'}</strong></span><br />\n                            <span>Комиссия сервиса: <strong>{this.state.equipment.serviceСommission + ' р. в т.ч. НДС'}</strong></span><br />\n                            <span>Итого: <strong>{this.state.equipment.totalPrice + ' р.'}</strong></span><br />\n                        </div>\n\n                    </div>\n                    <div className=\"bigMap-container\" >\n                        <YMaps\n                            query={{\n                                ns: 'use-load-option',\n                                load: \"package.full\",\n                                apikey: '45c5bae3-a422-4593-8d3a-7204d434cca5'  //Проблемы с картой? Начни отсюда\n                            }}\n                        >\n                            <Map instanceRef={ref => (this.map = ref)} onLoad={this.createTemplateLayoutFactory} defaultState={this.state} width='100%' onClick={this.mapClick.bind(this)}>\n                                <Placemark\n                                    geometry={this.state.tempCoords}\n                                    properties={{ balloonContentBody: this.state.tempAddress }}\n                                // options={{ balloonContentLayout: this.state.template }}\n                                />\n                                <Clusterer\n                                    options={{\n                                        preset: 'islands#invertedVioletClusterIcons',\n                                        groupByCoordinates: false,\n                                    }}>\n                                    {this.state.coords.map((coords, index) => (\n                                        <Placemark key={index} geometry={coords}\n                                            properties={{ balloonContentBody: this.state.address[index] }}\n                                        />\n                                    ))}\n                                </Clusterer>\n                                {/* <Circle                     //окружность для поиска доступной техники\n                                    geometry={[this.state.center, 10000]}\n                                    options={{\n                                        draggable: false,\n                                        fillColor: '#DB709377',\n                                        strokeColor: '#990066',\n                                        strokeOpacity: 0.8,\n                                        strokeWidth: 5,\n                                    }}\n                                /> */}\n                            </Map>\n                        </YMaps>\n                    </div>\n                </div>\n                <div className=\"btn-wrap\">\n                    <div onClick={this.addAddress.bind(this)} className=\"btn\">Добавить адрес</div>\n                    <div onClick={this.setRoute.bind(this)} className=\"btn bigMap-next\">Далее</div>\n                    {/* <Link to={{ pathname: '/orderResponded' }} className=\"btn bigMap-next\"><div>Далее</div></Link> */}\n                </div>\n            </div>\n        )\n    }\n    // init() {\n\n    //     var address1Elem = document.getElementById('address1');\n    //     address1Elem.onblur = setAddress(address1Elem.value);\n\n    //     var bigMap = new ymaps.Map(\"bigMap-container\", {\n    //         center: [53.889953, 27.539290],\n    //         zoom: 10,\n    //         controls: []\n    //     }, {\n    //             searchControlProvider: 'yandex#search'\n    //         });\n    //     var myPlacemark;\n    //     bigMap.events.add('click', function (e) {\n    //         var coords = e.get('coords');\n    //         if (myPlacemark) {\n    //             myPlacemark.geometry.setCoordinates(coords);\n    //         }\n    //         // Если нет – создаем.\n    //         else {\n    //             myPlacemark = createPlacemark(coords);\n    //             bigMap.geoObjects.add(myPlacemark);\n    //             // Слушаем событие окончания перетаскивания на метке.\n    //             myPlacemark.events.add('dragend', function () {\n    //                 getAddress(myPlacemark.geometry.getCoordinates());\n    //             });\n    //         }\n    //         getAddress(coords);\n    //     });\n    //     function createPlacemark(coords) {\n    //         return new ymaps.Placemark(coords, {\n    //             // iconCaption: 'поиск...'\n    //         }, {\n    //                 // preset: 'islands#violetDotIconWithCaption',\n    //                 draggable: true,\n    //                 iconLayout: 'default#image',\n    //                 iconImageHref: './images/point.svg',\n    //                 iconImageSize: [40, 43],\n    //                 iconImageOffset: [-20, -43],\n    //             });\n    //     }\n    //     function getAddress(coords) {\n    //         // myPlacemark.properties.set('iconCaption', 'поиск...');\n    //         ymaps.geocode(coords).then(function (res) {\n    //             var firstGeoObject = res.geoObjects.get(0);\n\n    //             myPlacemark.properties\n    //                 .set({\n\n    //                     // Формируем строку с данными об объекте.\n    //                     iconCaption: [\n    //                         // Название населенного пункта или вышестоящее административно-территориальное образование.\n    //                         firstGeoObject.getLocalities().length ? firstGeoObject.getLocalities() : firstGeoObject.getAdministrativeAreas(),\n    //                         // Получаем путь до топонима, если метод вернул null, запрашиваем наименование здания.\n    //                         firstGeoObject.getThoroughfare() || firstGeoObject.getPremise()\n    //                         // firstGeoObject.getPremise()\n    //                     ].filter(Boolean).join(', '),\n    //                     // В качестве контента балуна задаем строку с адресом объекта.\n    //                     balloonContent: firstGeoObject.getAddressLine()\n    //                 });\n    //             address1Elem.value = firstGeoObject.getAddressLine();\n    //         });\n    //     };\n    //     function setAddress(param) {\n    //         ymaps.geocode(param, {\n    //             /**\n    //              * Опции запроса\n    //             //  * @see https://api.yandex.ru/maps/doc/jsapi/2.1/ref/reference/geocode.xml\n    //              */\n    //             // Сортировка результатов от центра окна карты.\n    //             // boundedBy: myMap.getBounds(),\n    //             // strictBounds: true,\n    //             // Вместе с опцией boundedBy будет искать строго внутри области, указанной в boundedBy.\n    //             // Если нужен только один результат, экономим трафик пользователей.\n    //             results: 1\n    //         }).then(function (res) {\n    //             // Выбираем первый результат геокодирования.\n    //             var firstGeoObject = res.geoObjects.get(0),\n    //                 // Координаты геообъекта.\n    //                 coords = firstGeoObject.geometry.getCoordinates(),\n    //                 // Область видимости геообъекта.\n    //                 bounds = firstGeoObject.properties.get('boundedBy');\n\n    //             firstGeoObject.options.set('preset', 'islands#darkBlueDotIconWithCaption');\n    //             // Получаем строку с адресом и выводим в иконке геообъекта.\n    //             firstGeoObject.properties.set('iconCaption', firstGeoObject.getAddressLine());\n    //             // Добавляем первый найденный геообъект на карту.\n    //             bigMap.geoObjects.add(firstGeoObject);\n    //             // Масштабируем карту на область видимости геообъекта.\n    //             bigMap.setBounds(bounds, {\n    //                 // Проверяем наличие тайлов на данном масштабе.\n    //                 checkZoomRange: true\n    //             });\n    //         });\n    //     }\n    // }\n    //<Map onClick={} defaultState={{ center: [53.899953, 27.539290], zoom: 11 }} width={document.getElementsByClassName('bigMap-container').offsetWidth + 'px'} height={document.getElementsByClassName('bigMap-container').offsetHeight + 'px'}>\n\n}"]},"metadata":{},"sourceType":"module"}